// typeScript로 블록 생성 만들기

// 환경 설정 하고

// ts-node 설치
// ============================================================================
// npm i -D typescript ts-node @types/node
// ============================================================================

// tsconfig.json 만들기
// ============================================================================
// tsc --init
// ============================================================================

// tsconfig.json에서 paths 사용할거라
// ============================================================================
// npm i -D tsconfig-paths
// ============================================================================

// 필요한모듈 설치
// 머큘루트와 해시값 필요 => crypto-js, merkle 설치
// ============================================================================
// npm i crypto-js merkle
// ============================================================================

// typeScript는 외부 모듈을 사용할 경우에 타입 정의파일이 필요하다.
// crypto-js, merkle 모듈 타입을 가져올 수 있는 모듈 설치
// ============================================================================
// npm i --save-dev @types/crypto-js
// npm i --save-dev @types/merkle
// ============================================================================

// 제네시스 블록 만들기

// 테스트하기

// typeScript로 블록체인을 만들어봤는데 객체지향적인 방법으로 코드를 작성했다.
// OOP(객체지향 프로그래밍) => 프로그램의 설계방법 개념의 하나이다.
// OOP는 프로그램을 단순히 실행 및 데이터 처리하는 방법뿐만이 아니라
// 수많은 객체라는 단위를 만들어서 이 객체를 가지고 동작하는 상호작용을 서술한 방식이다.
// OOP에서 객체는 하나의 역할을 수행하는 함수와 변수들의 묶음 데이터로 보면 된다.

// 이런 객체지향 프로그래밍은 프로그램을 만들때 제일 작은 단위부터 만들어가는 방식을 선호한다.
// 그런데 위의 방식으로 한다면 작성된 코드들의 테스트가 어렵다는 단점이 있고
// 이러한 단점 때문에  라이브러리를 사용해서 테스트를 한다.

// 그냥 개발이 아니라 테스트 코드를 작성하면서 개발해나가는게
// TDD(Test Driven Development)

// 테스트를 위해서 Jest라는 라이브러리를 써보자
// ============================================================================
// npm i -D ts-jest @types/jest babel-core
// npm i -D @babel/preset-typescript @babel/preset-env
// ============================================================================
// 설치하고 babel.config.js 랑 jest.config.ts 파일두개 만들어주기

// 체인 만들기
// block 클래스로 만들 블록들을 체인으로 연결시켜줄 chain 클래스를 만들어보자.
// chain 클래스에는 생성한 블록을 배열로 담아서 블록체인을 만들 예정
// 이미 지금 우리가 만든 블록은 블록의 속성으로 체이닝 이미 이뤄지고 있는데
// 이전 블록 해시 값을 속성으로 가지고 있기 때문에 특정 블록기준으로 이전 블록 해시 값이 달라지면
// 현재 블록의 이전 해시값과 불일치가 발생해서 연결 고리가 끈긴다.
// chain클래스를 따로 만들어서 생성된 블록을 하나의 배열안에 담아주는 역할을 할예정
// 이렇게 하는 이유는 이후에 우리가 마이닝 할때 난이도 계산을 하기 위해서

// POW (Proof of Work : 작업증명)

// 작업 증명 역사
// 1993년 모니 나노어이가 작업증명의 기본 개념을 고안했다.
// 1997년 영국의 암호학자인 애덤백의 해시캐시고 이후에 2009년 이 기술은
// 사토시 나카모토라는 사람이 비트코인에 작업증명을 적용시켜 오느날까지 사용된다.

// 해시캐시는 대량으로 스팸메일을 방지하고자 고안된 것.
// 이메일을 보내기 위해서 작업증명 알고리즘을 이용해서 해시값을 찾고
// 그 보상으로 우표같은 것을 발행했다.
// 이 과정이 시간과 비용이 많이들고 대량 발생되는 스펨메일을 막을수있는 방법으로 책택되었다.

// 작업증명 방식은 거래가 발생하면 해당 거래가 유용한지에 대한 합의 검증 방식.
// 논스값을 사용한다.

// 간단한 설명
// 작업증명은 어려운 수학문제를 푸는것과 마찬가지이고
// 작업증명을 하는것을 채굴이라고 부른다.
// 채굴을 한 사람에게(작업증명을 한 사람에게) 보상으로 코인을 발급한다.

// 여기서 특정 조건을 만족하는 논스값을 찾는 것이다.

// 블록체인 상의 모든 참여자가 동일한 순서로 블록을 연결하기 위해선
// 합의 알고리즘이 필요한데
// 대표적인 합의 알고리즘에는 POW, POS, DPOS, POA 등이 있다.

// 만약 난이도가 4라면
// 논스 ???
// 0000 이상인 해시값(목표값)이 나올때까지
// 논스를 0에서 계속 하나씩 더하면서(해싱을 해서) 목표값을 찾는것이다.
// 0000 -> 00000

// "작업 증명 방식(POW)"는 목표값 이하의 해시값을 찾는과정을 무수히 반복해서
// 해당작업에 참여했음을 증명하는 방식의 알고리즘이다.

// 작업 증명 알고리즘의 필요성은 네트워크 상의 모든 노드가 동시에 블록을 만들수 없게 하는것에 있다.
// (작업증명을 통과해야만 새로운 블록을 추가 생성할수있게됨)

// 작업증명 알고리즘은 Difficulty 조절 알고리즘을 이용해서 약 10분당 1개의 블록이 생성되는 것을 보장하게 된다.

// 난이도 조정 블록 범위 => 10
// 블록의 생성 시간 (단위 : 분) => 10
// 생성 시간 (단위 : 초) => 60

// Difficulty 조절 알고리즘은 다음과 같이 설계하자
// 블록 한개가 생성되는 예상 시간을 10분으로 설정하고, 10개의 블록을 한 묶음으로 해서 블록 한묶음이 생성되는
// 예상시간을 6000초라는 값을 할당해주고 이후 10개의 블록이 생성되는데 걸리는 시간이
// timeExpected / 2 보다 작을 경우에는 난이도를 1 증가시키고
// timeExpected * 2 보다 클 경우에는 난이도를 1 감소시킨다.

// P2P네트워크

// block 클래스랑 chain을 가지고
// p2p네트워크 http / ws 환경 구성
// P2P네트워크를 만드는데 http와 ws 웹소켓을 사용해서
// api들을 구성하고 블록을 가져올 express모듈로 서버 동작을 하고 P2P 네트워크를 웹소켓으로 구성
// express와 type-express 설치
// ==========================================================================
// npm i express
// npm i --save-dev @types/express
// ==========================================================================

// ws 웹소켓 설치
// ==========================================================================
// npm i ws
// npm i --save-dev @types/ws
// ==========================================================================
