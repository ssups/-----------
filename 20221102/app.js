// typeScript로 블록 생성 만들기

// 환경 설정 하고

// ts-node 설치
// ============================================================================
// npm i -D typescript ts-node @types/node
// ============================================================================

// tsconfig.json 만들기
// ============================================================================
// tsc --init
// ============================================================================

// tsconfig.json에서 paths 사용할거라
// ============================================================================
// npm i -D tsconfig-paths
// ============================================================================

// 필요한모듈 설치
// 머큘루트와 해시값 필요 => crypto-js, merkle 설치
// ============================================================================
// npm i crypto-js merkle
// ============================================================================

// typeScript는 외부 모듈을 사용할 경우에 타입 정의파일이 필요하다.
// crypto-js, merkle 모듈 타입을 가져올 수 있는 모듈 설치
// ============================================================================
// npm i --save-dev @types/crypto-js
// npm i --save-dev @types/merkle
// ============================================================================

// 제네시스 블록 만들기

// 테스트하기

// typeScript로 블록체인을 만들어봤는데 객체지향적인 방법으로 코드를 작성했다.
// OOP(객체지향 프로그래밍) => 프로그램의 설계방법 개념의 하나이다.
// OOP는 프로그램을 단순히 실행 및 데이터 처리하는 방법뿐만이 아니라
// 수많은 객체라는 단위를 만들어서 이 객체를 가지고 동작하는 상호작용을 서술한 방식이다.
// OOP에서 객체는 하나의 역할을 수행하는 함수와 변수들의 묶음 데이터로 보면 된다.

// 이런 객체지향 프로그래밍은 프로그램을 만들때 제일 작은 단위부터 만들어가는 방식을 선호한다.
// 그런데 위의 방식으로 한다면 작성된 코드들의 테스트가 어렵다는 단점이 있고
// 이러한 단점 때문에  라이브러리를 사용해서 테스트를 한다.

// 그냥 개발이 아니라 테스트 코드를 작성하면서 개발해나가는게
// TDD(Test Driven Development)

// 테스트를 위해서 Jest라는 라이브러리를 써보자
// ============================================================================
// npm i -D ts-jest @types/jest babel-core
// npm i -D @babel/preset-typescript @babel/preset-env
// ============================================================================
// 설치하고 babel.config.js 랑 jest.config.ts 파일두개 만들어주기
